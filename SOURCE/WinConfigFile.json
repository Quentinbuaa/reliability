{
  "data_button": {
    "text": "数据路径",
    "description": "单步转移矩阵路径信息获取。根据可靠性计算流程可以知道，首先需要获取模块之间的单步转移矩阵。单步转移矩阵是根据软件的实时运行信息计算获得，计算部分在Linux操作系统环境下获取。",
    "title": "数据路径选择"
  },
  "com_button": {
    "text": "代码路径",
    "description": "子模块有效代码行数获取。为了获取系统可靠性，我们需要对各个子模块的可靠性进行预估。根据子模块的可靠性计算公式，我们需要获取每个子模块的有效代码行数。有效代码行数是根据软件的静态信息统计获得。",
    "title": "代码路径选择"
  },
  "tao_button": {
    "text": "平均访问时间（Tao）",
    "description": "子模块平均访问时间（Tao）获取。为了获取系统可靠性，我们需要对各个子模块的可靠性进行预估。根据子模块的可靠性计算公式，我们需要获取每个子模块的平均访问时间（平均执行时间）。平均访问时间是根据软件的实时运行信息计算获得，计算部分在Linux操作系统环境下获取。",
    "title": "Tao文件路径选择"
  },
  "fd_button": {
    "text": "软件缺陷密度",
    "description": "子模块的软件缺陷密度（每一千行缺陷语句条数）设置。系统的失效与其本身的缺陷数密切相关，系统的缺陷越多，越容易产生失效。基于此，我们假设失效率与系统的初始缺陷数是成正比的关系。在本项中，我们需要设置其中的软件缺陷密度（failure density）。通常，我们默认取6，即每一千行六个缺陷",
    "title": "软件失效密度配置"
  },
  "fb_button": {
    "text": "软件失效比例",
    "description": "子模块的软件失效比例设置。系统的失效与其本身的缺陷数密切相关，系统的缺陷越多，越容易产生失效。基于此，我们假设失效率与系统的初始缺陷数是成正比的关系。在本项中，我们需要设置其中的比例常数（fb）。通常，比例常数是一个很小的值，我们默认取k=0.000001（可以调整）。",
    "title": "软件失效比例配置"
  },
  "confirm_button": {
    "text": "确认",
    "description": "确认信息并开始计算。在本系统中，可靠性的计算需要调用Matlab的计算模块，同时将计算模块集成到本软件之中，使用人员无须打开Matlab即可完成相应的计算。本系统会详细展示可靠性的运行结果",
    "title": "确认"
  },
  "label_frame": {
    "text": "本章以系统机载飞控软件为例，利用DTMC对软件可靠性进行求解。假设失效率为常数，将程序运行到某个C文件当做程序处于某个状态，程序退出为吸收态，那么构建的离散时间马尔可夫模型进行联合求解，即可得出系统可靠性。"
  }
}